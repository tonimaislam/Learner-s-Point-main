<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="refresh.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
</root>